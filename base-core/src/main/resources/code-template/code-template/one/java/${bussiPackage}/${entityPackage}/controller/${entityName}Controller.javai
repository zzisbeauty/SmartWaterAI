package ${bussiPackage}.${entityPackage}.controller;

import java.util.Arrays;

import java.io.IOException;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.Optional;

import com.hanwei.core.annotation.AutoLog;
import com.hanwei.core.base.BaseController;
import com.hanwei.core.base.QueryGenerator;
import com.hanwei.core.common.api.vo.Result;
import ${bussiPackage}.${entityPackage}.entity.${entityName};
import ${bussiPackage}.${entityPackage}.service.I${entityName}Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;



 /**
 * @Description: ${tableVo.ftlDescription}
 * @Author: hanwei
 * @Date:   ${.now?string["yyyy-MM-dd"]}
 * @Version: V1.0
 */
@Slf4j
@Tag(name="${tableVo.ftlDescription}")
@RestController
@RequestMapping("/${entityPackage}/${entityName?uncap_first}")
public class ${entityName}Controller extends BaseController<${entityName}, I${entityName}Service> {
	@Autowired
	private I${entityName}Service ${entityName?uncap_first}Service;

	/**
	 * 分页列表查询
	 *
	 * @param ${entityName?uncap_first}
	 * @param pageNo
	 * @param pageSize
	 * @param req
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-分页列表查询")
	@Operation(summary="${tableVo.ftlDescription}-分页列表查询")
	@RequestMapping(value = "/list", method = {RequestMethod.GET})
	public Result<?> queryPageList(${entityName} ${entityName?uncap_first},
								   @RequestParam(name="pageNo", defaultValue="1")
								    @ApiParameter(name = "pageNo", description = "页码", required = true, demovalue = "1",
                                                                              location = ApiEnum.PARAMETER_LOCATION_QUERY, defaultvalue = "1")
								   Integer pageNo,
								   @RequestParam(name="pageSize", defaultValue="10")
								   @ApiParameter(name = "pageSize", description = "每页数量", required = true, demovalue = "1",
                                                                              location = ApiEnum.PARAMETER_LOCATION_QUERY, defaultvalue = "10")
								   Integer pageSize,
								   HttpServletRequest req) {
		QueryWrapper<${entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${entityName?uncap_first}, req.getParameterMap());
		Page<${entityName}> page = new Page<${entityName}>(pageNo, pageSize);
		IPage<${entityName}> pageList = ${entityName?uncap_first}Service.page(page, queryWrapper);
		return Result.OK(pageList);
	}

	/**
	 * 添加
	 *
	 * @param ${entityName?uncap_first}
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-添加")
	@Operation(summary="${tableVo.ftlDescription}-添加")
	@PostMapping(value = "/add")
	public Result<?> add(@Valid @RequestBody ${entityName} ${entityName?uncap_first}) {
	try{
            Boolean flag = ${entityName?uncap_first}Service.save(${entityName?uncap_first});
            if(flag){
                return Result.OK("添加成功！");
            }else{
                return Result.error(200,"添加失败！");
            }
		}catch(Exception e){
			log.error(e.getMessage(),e);
			return Result.error(200,e.getMessage());
		}

	}

	/**
	 * 编辑
	 *
	 * @param ${entityName?uncap_first}
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-编辑")
	@Operation(summary="${tableVo.ftlDescription}-编辑")
	@RequestMapping(value = "/edit", method = {RequestMethod.POST})
	public Result<?> edit(@RequestBody ${entityName} ${entityName?uncap_first}) {
		Boolean flag = ${entityName?uncap_first}Service.updateById(${entityName?uncap_first});
		if(flag){
            return Result.OK("编辑成功！");
        }else{
            return Result.error(200,"编辑失败！");
        }
	}

	/**
	 * 通过id删除
	 *
	 * @param id
	 * @return
	 */
    @AutoLog(value = "${tableVo.ftlDescription}-通过id删除")
	@Operation(summary="${tableVo.ftlDescription}-通过id删除")
	@RequestMapping(value = "/delete", method = {RequestMethod.POST})
	public Result<?> delete(@RequestParam(name="id",required=true)
	                        @ApiParameter(name = "id", description = "接口id", required = true,
                                location = ApiEnum.PARAMETER_LOCATION_QUERY)
                            String id) {
		Boolean flag = ${entityName?uncap_first}Service.removeById(id);
		if(flag){
            return Result.OK("删除成功！");
        }else{
            return Result.error(200,"删除失败！");
        }
	}

	/**
	 * 批量删除
	 *
	 * @param ids
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-批量删除")
	@Operation(summary="${tableVo.ftlDescription}-批量删除")
	@RequestMapping(value = "/deleteBatch", method = {RequestMethod.POST})
	public Result<?> deleteBatch(@RequestParam(name="ids",required=true)
                                 @ApiParameter(name = "ids", description = "接口ids", required = true,
                                                                location = ApiEnum.PARAMETER_LOCATION_QUERY)
                                 String ids) {
		Boolean flag = this.${entityName?uncap_first}Service.removeByIds(Arrays.asList(ids.split(",")));
		if(flag){
            return Result.OK("批量删除成功！");
        }else{
            return Result.error(200,"批量删除失败！");
        }
	}

	/**
	 * 通过id查询
	 *
	 * @param id
	 * @return
	 */
	@AutoLog(value = "${tableVo.ftlDescription}-通过id查询")
	@Operation(summary="${tableVo.ftlDescription}-通过id查询")
	@GetMapping(value = "/queryById")
	public Result<?> queryById(@RequestParam(name="id",required=true)
                                @ApiParameter(name = "id", description = "接口id", required = true,
                                                                location = ApiEnum.PARAMETER_LOCATION_QUERY)
                                String id) {
		${entityName} ${entityName?uncap_first} = ${entityName?uncap_first}Service.getById(id);
		return Result.OK(${entityName?uncap_first});
	}

	 /**
	  * 支持文件流的情况下直接使用该方式
	  * 文件流
	  *
	  * @param request
	  * @param response
	  * @param ${entityName?uncap_first}
	  * @param fileName
	  */
	 @AutoLog(value = "${tableVo.ftlDescription}-文件流导出")
	 @Operation(summary="${tableVo.ftlDescription}-文件流导出")
	 @RequestMapping(value = "/exportXls", method = {RequestMethod.GET})
	 public Result<?> exportXls(HttpServletRequest request, HttpServletResponse response, ${entityName} ${entityName?uncap_first}, String fileName){
		 try {
			 // 这里注意 使用swagger 会导致各种问题，请直接用浏览器或者用postman
			 response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
			 response.setCharacterEncoding("utf-8");
			 // URLEncoder.encode可以防止中文乱码
			 fileName = URLEncoder.encode(Optional.ofNullable(fileName).orElse("${tableVo.ftlDescription}"), "UTF-8").replaceAll("\\+", "%20");
			 response.setHeader("Content-disposition", "attachment;filename*=utf-8''" + fileName + ".xlsx");
			 ${entityName?uncap_first}Service.exportData(response.getOutputStream(), request.getParameterMap(), ${entityName?uncap_first});
			 return Result.OK("导出成功");
		 } catch (IOException e) {
			 log.error("导出Excel异常{}", e.getMessage());
			 return Result.error("导出失败",e.getMessage());
		 }
	 }

	 /**
	  * 不支持文件流的情况下直接使用该方式
	  * base64文件
	  *
	  * @param request
	  * @param ${entityName?uncap_first}
	  */
	 @AutoLog(value = "${tableVo.ftlDescription}-base64方式导出")
	 @Operation(summary="${tableVo.ftlDescription}-base64方式导出")
	 @RequestMapping(value = "/exportXlsToBase64", method = {RequestMethod.GET})
	 public Result<?> exportXlsToBase64(HttpServletRequest request, ${entityName} ${entityName?uncap_first}) {
		 try {
			 String data = ${entityName?uncap_first}Service.exportDataToBase64(request.getParameterMap(), ${entityName?uncap_first});
			 return Result.OK("导出成功",data);
		 } catch (Exception e) {
			 log.error("导出Excel异常{}", e.getMessage());
			 return Result.error("导出失败", e.getMessage());
		 }
	 }

	 /**
	  * 通过excel导入数据
	  *
	  * @param file
	  * @return
	  */
	 @AutoLog(value = "${tableVo.ftlDescription}-excel文件导入")
	 @Operation(summary="${tableVo.ftlDescription}-excel文件导入")
	 @RequestMapping(value = "/importExcel", method = RequestMethod.POST)
	 public Result<?> importExcel(@RequestParam MultipartFile file) {
		 return ${entityName?uncap_first}Service.importData(file);
	 }

	 /**
	  * 下载导入模板
	  * @return
	  */
	 @Operation(summary="${tableVo.ftlDescription}-下载导入模板")
	 @RequestMapping(value = "/getImportTemplate", method = RequestMethod.GET)
	 public Result<?> getImportTemplate() {
		 try {
			 String data = ${entityName?uncap_first}Service.getImportTemplate();
			 return Result.OK("导出模板成功",data);
		 } catch (Exception e) {
			 log.error("导出Excel异常{}", e.getMessage());
			 return Result.error("导出模板失败", e.getMessage());
		 }
	 }

}
